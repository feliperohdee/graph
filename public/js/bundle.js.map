{"version":3,"sources":["webpack:///./src/client/index.jsx","webpack:///./src/client/components/index.js","webpack:///./src/client/components/Graphi.jsx"],"names":["render","document","getElementById","Graphi","search","window","location","props","parameters","state","uri","localStorage","getItem","substr","split","forEach","eq","entry","indexOf","decodeURIComponent","slice","variables","JSON","stringify","parse","e","newQuery","query","updateURL","newVariables","newOperationName","operationName","newSearch","Object","keys","filter","Boolean","key","map","encodeURIComponent","join","history","replaceState","graphQLParams","method","headers","body","then","response","text","responseBody","error","keyCode","target","value","setState","setItem","removeItem","exit","fetcher","onEditQuery","onEditVariables","onEditOperationName","setUri"],"mappings":"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","file":"bundle.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n    Graphi\n} from './components';\n\nReactDOM.render(<Graphi/>, document.getElementById('app'));\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/client/index.jsx\n **/","import Graphi from './Graphi';\n\nexport {\n\tGraphi\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/client/components/index.js\n **/","import GraphiQL from 'graphiql';\nimport fetch from 'isomorphic-fetch';\nimport React, {\n    Component\n} from 'react';\n\n// Parse the search string to get url parameters.\nconst search = window.location.search;\n\nexport default class extends Component {\n    parameters = {};\n    state = {\n        uri: localStorage.getItem('graphiql:uri')\n    }\n\n    constructor(props) {\n        super(props);\n\n        search\n            .substr(1)\n            .split('&')\n            .forEach(entry => {\n                const eq = entry.indexOf('=');\n\n                if (eq >= 0) {\n                    this.parameters[decodeURIComponent(entry.slice(0, eq))] = decodeURIComponent(entry.slice(eq + 1));\n                }\n            });\n\n        // if variables was provided, try to format it.\n        if (this.parameters.variables) {\n            try {\n                this.parameters.variables = JSON.stringify(JSON.parse(this.parameters.variables), null, 2);\n            } catch (e) {\n                // Do nothing, we want to display the invalid JSON as a string, rather\n                // than present an error.\n            }\n        }\n    }\n\n    onEditQuery(newQuery) {\n        this.parameters.query = newQuery;\n        this.updateURL();\n    }\n\n    onEditVariables(newVariables) {\n        this.parameters.variables = newVariables;\n        this.updateURL();\n    }\n\n    onEditOperationName(newOperationName) {\n        this.parameters.operationName = newOperationName;\n        this.updateURL();\n    }\n\n    updateURL() {\n        const newSearch = '?' + Object.keys(this.parameters)\n            .filter(key => {\n                return Boolean(this.parameters[key]);\n            }).map(key => {\n                return `${encodeURIComponent(key)} = ${encodeURIComponent(this.parameters[key])}`;\n            }).join('&');\n\n        history.replaceState(null, null, newSearch);\n    }\n\n    // Defines a GraphQL fetcher using the fetch API.\n    fetcher(graphQLParams) {\n        const {\n            uri\n        } = this.state;\n\n        return fetch(uri.indexOf('http') >= 0 ? uri : `http://${uri}`, {\n                method: 'post',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(graphQLParams)\n            })\n            .then(response => response.text())\n            .then(responseBody => {\n                try {\n                    return JSON.parse(responseBody);\n                } catch (error) {\n                    return responseBody;\n                }\n            });\n    }\n\n    setUri(e) {\n        if(e.keyCode !== 13){\n            return;\n        }\n\n        const uri = e.target.value;\n\n        this.setState({\n            uri\n        }, () => {\n            localStorage.setItem('graphiql:uri', uri);\n        });\n    }\n\n    exit(){\n        this.setState({\n            uri: null\n        }, () => {\n            localStorage.removeItem('graphiql:uri');\n            localStorage.removeItem('graphiql:variables');\n            localStorage.removeItem('graphiql:variableEditorHeight');\n            localStorage.removeItem('graphiql:query');\n            localStorage.removeItem('graphiql:operationName');\n            localStorage.removeItem('graphiql:editorFlex');\n            localStorage.removeItem('graphiql:docExplorerWidth');\n        });\n    }\n\n    render() {\n        const {\n            uri\n        } = this.state;\n\n        return uri ? (\n                <section>\n                    <button className=\"exit-button\" onClick={::this.exit}>Exit</button>\n                    <GraphiQL \n                        fetcher={::this.fetcher}\n                        query={this.parameters.query}\n                        variables={this.parameters.variables}\n                        operationName={this.parameters.operationName}\n                        onEditQuery={::this.onEditQuery}\n                        onEditVariables={::this.onEditVariables}\n                        onEditOperationName={::this.onEditOperationName}/>\n                </section>\n            ) : (\n                <section className=\"uri-input\">\n                    <input type=\"text\" placeholder=\"GraphQL Server URI (like: localhost:3000/graphql)\" onKeyUp={::this.setUri}/>\n                </section>\n            );\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/client/components/Graphi.jsx\n **/"],"sourceRoot":""}